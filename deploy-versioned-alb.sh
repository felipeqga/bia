#!/bin/bash

# Deploy com Versionamento e Rollback - Projeto BIA com ALB
# Criado seguindo a filosofia de simplicidade do projeto

set -e

ECR_REGISTRY="387678648422.dkr.ecr.us-east-1.amazonaws.com"
ECR_REPOSITORY="bia"
CLUSTER_NAME="cluster-bia-alb"
SERVICE_NAME="service-bia-alb"
REGION="us-east-1"
ALB_DNS="bia-1260066125.us-east-1.elb.amazonaws.com"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Fun√ß√£o para gerar tag com timestamp
generate_tag() {
    echo "v$(date +'%Y%m%d-%H%M%S')"
}

# Fun√ß√£o para listar √∫ltimas 10 imagens
list_images() {
    log "üìã √öltimas 10 imagens no ECR:"
    aws ecr describe-images \
        --repository-name $ECR_REPOSITORY \
        --region $REGION \
        --query 'sort_by(imageDetails,&imagePushedAt)[-10:].[imageTags[0],imageDigest,imagePushedAt]' \
        --output table 2>/dev/null || {
        error "Erro ao listar imagens do ECR"
        exit 1
    }
}

# Fun√ß√£o para verificar se tag existe no ECR
check_tag_exists() {
    local tag=$1
    aws ecr describe-images \
        --repository-name $ECR_REPOSITORY \
        --image-ids imageTag=$tag \
        --region $REGION \
        --query 'imageDetails[0].imageTags[0]' \
        --output text 2>/dev/null | grep -q "$tag"
}

# Fun√ß√£o para obter imagem atual do service
get_current_image() {
    aws ecs describe-services \
        --cluster $CLUSTER_NAME \
        --services $SERVICE_NAME \
        --region $REGION \
        --query 'services[0].taskDefinition' \
        --output text | xargs -I {} aws ecs describe-task-definition \
        --task-definition {} \
        --region $REGION \
        --query 'taskDefinition.containerDefinitions[0].image' \
        --output text
}

# Fun√ß√£o para salvar imagem atual como backup
save_current_image() {
    local current_image=$(get_current_image)
    echo "$current_image" > .last-deployed-image
    info "üíæ Imagem atual salva: $current_image"
}

# Fun√ß√£o para fazer deploy
deploy() {
    local tag=$(generate_tag)
    
    log "üöÄ Iniciando deploy versionado - Tag: $tag"
    
    # Salvar vers√£o atual como backup
    save_current_image
    
    # Login no ECR
    log "üîê Fazendo login no ECR..."
    aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
    
    # Build da imagem
    log "üèóÔ∏è Fazendo build da imagem com tag: $tag"
    docker build -t bia:$tag .
    
    # Tag para ECR
    log "üè∑Ô∏è Taggeando imagem..."
    docker tag bia:$tag $ECR_REGISTRY/$ECR_REPOSITORY:$tag
    docker tag bia:$tag $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    # Push para ECR
    log "üì§ Fazendo push para ECR..."
    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$tag
    docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    log "‚úÖ Imagem $tag enviada com sucesso!"
    
    # Deploy no ECS
    log "üöÄ Iniciando deploy da vers√£o: $tag"
    aws ecs update-service \
        --cluster $CLUSTER_NAME \
        --service $SERVICE_NAME \
        --force-new-deployment \
        --region $REGION > /dev/null
    
    # Aguardar deployment estabilizar
    log "‚è≥ Aguardando deployment estabilizar..."
    aws ecs wait services-stable \
        --cluster $CLUSTER_NAME \
        --services $SERVICE_NAME \
        --region $REGION
    
    log "‚úÖ Deploy da vers√£o $tag conclu√≠do com sucesso!"
    
    # Mostrar status
    show_status
    
    log "üéâ Deploy conclu√≠do! Vers√£o: $tag"
}

# Fun√ß√£o para rollback
rollback() {
    local target_tag=$1
    
    if [ -z "$target_tag" ]; then
        # Rollback autom√°tico - usar backup
        if [ ! -f .last-deployed-image ]; then
            error "Arquivo de backup n√£o encontrado. Use rollback manual especificando a tag."
            exit 1
        fi
        
        local backup_image=$(cat .last-deployed-image)
        log "üîÑ Iniciando rollback autom√°tico para: $backup_image"
        
        # Extrair tag do backup
        target_tag=$(echo $backup_image | sed 's/.*://')
        if [ "$target_tag" = "latest" ]; then
            error "Backup aponta para 'latest'. Use rollback manual especificando a tag."
            exit 1
        fi
    else
        # Rollback manual - verificar se tag existe
        log "üîÑ Iniciando rollback manual para tag: $target_tag"
        
        if ! check_tag_exists $target_tag; then
            error "Tag $target_tag n√£o encontrada no ECR"
            list_images
            exit 1
        fi
        
        # Salvar vers√£o atual como backup antes do rollback
        save_current_image
    fi
    
    # Criar nova task definition com a imagem de rollback
    local current_task_def=$(aws ecs describe-services \
        --cluster $CLUSTER_NAME \
        --services $SERVICE_NAME \
        --region $REGION \
        --query 'services[0].taskDefinition' \
        --output text)
    
    # Obter defini√ß√£o atual e modificar imagem
    aws ecs describe-task-definition \
        --task-definition $current_task_def \
        --region $REGION \
        --query 'taskDefinition' > temp_task_def.json
    
    # Remover campos read-only
    jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' temp_task_def.json > rollback_task_def.json
    
    # Atualizar imagem
    jq --arg image "$ECR_REGISTRY/$ECR_REPOSITORY:$target_tag" '.containerDefinitions[0].image = $image' rollback_task_def.json > rollback_task_def_updated.json
    
    # Registrar nova task definition
    aws ecs register-task-definition \
        --cli-input-json file://rollback_task_def_updated.json \
        --region $REGION > /dev/null
    
    # Atualizar service
    aws ecs update-service \
        --cluster $CLUSTER_NAME \
        --service $SERVICE_NAME \
        --force-new-deployment \
        --region $REGION > /dev/null
    
    # Aguardar estabiliza√ß√£o
    log "‚è≥ Aguardando rollback estabilizar..."
    aws ecs wait services-stable \
        --cluster $CLUSTER_NAME \
        --services $SERVICE_NAME \
        --region $REGION
    
    # Limpeza
    rm -f temp_task_def.json rollback_task_def.json rollback_task_def_updated.json
    
    log "‚úÖ Rollback para $target_tag conclu√≠do com sucesso!"
    
    # Mostrar status
    show_status
}

# Fun√ß√£o para mostrar status
show_status() {
    log "üìä Status atual da aplica√ß√£o:"
    
    local current_image=$(get_current_image)
    info "üñºÔ∏è Imagem atual: $current_image"
    
    local service_status=$(aws ecs describe-services \
        --cluster $CLUSTER_NAME \
        --services $SERVICE_NAME \
        --region $REGION \
        --query 'services[0].status' \
        --output text)
    info "üîÑ Status do service: $service_status"
    
    local running_tasks=$(aws ecs describe-services \
        --cluster $CLUSTER_NAME \
        --services $SERVICE_NAME \
        --region $REGION \
        --query 'services[0].runningCount' \
        --output text)
    info "‚ñ∂Ô∏è Tasks rodando: $running_tasks"
    
    info "üåê URL da aplica√ß√£o: http://$ALB_DNS"
    info "üîç Health check: http://$ALB_DNS/api/versao"
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "Deploy Versionado com ALB - Projeto BIA"
    echo ""
    echo "Uso: $0 [comando] [op√ß√µes]"
    echo ""
    echo "Comandos:"
    echo "  deploy                    - Fazer deploy de nova vers√£o"
    echo "  rollback                  - Rollback para vers√£o anterior (autom√°tico)"
    echo "  rollback <tag>            - Rollback para tag espec√≠fica (manual)"
    echo "  list                      - Listar √∫ltimas 10 vers√µes no ECR"
    echo "  status                    - Mostrar status atual da aplica√ß√£o"
    echo "  help                      - Mostrar esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0 deploy                 # Deploy nova vers√£o"
    echo "  $0 rollback               # Rollback autom√°tico"
    echo "  $0 rollback v20250801-120000  # Rollback para tag espec√≠fica"
    echo "  $0 list                   # Ver vers√µes dispon√≠veis"
    echo "  $0 status                 # Ver status atual"
    echo ""
    echo "Configura√ß√£o atual:"
    echo "  Cluster: $CLUSTER_NAME"
    echo "  Service: $SERVICE_NAME"
    echo "  ALB DNS: $ALB_DNS"
    echo "  ECR: $ECR_REGISTRY/$ECR_REPOSITORY"
}

# Main
case "$1" in
    deploy)
        deploy
        ;;
    rollback)
        rollback "$2"
        ;;
    list)
        list_images
        ;;
    status)
        show_status
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        error "Comando inv√°lido: $1"
        echo ""
        show_help
        exit 1
        ;;
esac